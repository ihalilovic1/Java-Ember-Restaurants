{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","restaurants/tests/app.lint-test.js","restaurants/tests/helpers/destroy-app.js","restaurants/tests/helpers/module-for-acceptance.js","restaurants/tests/helpers/resolver.js","restaurants/tests/helpers/start-app.js","restaurants/tests/integration/components/dollar-rating-test.js","restaurants/tests/integration/components/footer-component-test.js","restaurants/tests/integration/components/header-component-test.js","restaurants/tests/integration/components/rate-component-test.js","restaurants/tests/integration/components/restaurant-tile-test.js","restaurants/tests/integration/components/search-bar-test.js","restaurants/tests/integration/components/star-rating-test.js","restaurants/tests/integration/helpers/adition-helper-test.js","restaurants/tests/integration/helpers/current-date-test.js","restaurants/tests/integration/helpers/equals-helper-test.js","restaurants/tests/integration/helpers/format-date-test.js","restaurants/tests/integration/helpers/format-time-test.js","restaurants/tests/test-helper.js","restaurants/tests/tests.lint-test.js","restaurants/tests/unit/adapters/user-test.js","restaurants/tests/unit/controllers/complete-reservation-test.js","restaurants/tests/unit/controllers/login-test.js","restaurants/tests/unit/controllers/register-test.js","restaurants/tests/unit/controllers/restaurant-test.js","restaurants/tests/unit/controllers/restaurants-test.js","restaurants/tests/unit/models/user-test.js","restaurants/tests/unit/routes/complete-reservation-test.js","restaurants/tests/unit/routes/index-test.js","restaurants/tests/unit/routes/login-test.js","restaurants/tests/unit/routes/register-test.js","restaurants/tests/unit/routes/restaurant-test.js","restaurants/tests/unit/routes/restaurants-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('restaurants/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/dollar-rating.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/dollar-rating.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/footer-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/footer-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/header-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/header-component.js should pass ESLint\\n\\n24:43 - \\'data\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/rate-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rate-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/restaurant-tile.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/restaurant-tile.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/search-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/search-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/star-rating.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/star-rating.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/complete-reservation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/complete-reservation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/restaurant.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/restaurant.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/restaurants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/restaurants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/adition-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/adition-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/current-date.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/current-date.js should pass ESLint\\n\\n3:29 - \\'params\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('helpers/equals-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/equals-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/format-date.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-date.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/format-time.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-time.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/complete-reservation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/complete-reservation.js should pass ESLint\\n\\n41:40 - \\'error\\' is defined but never used. (no-unused-vars)\\n48:40 - \\'error\\' is defined but never used. (no-unused-vars)\\n56:40 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n20:40 - \\'error\\' is defined but never used. (no-unused-vars)\\n27:48 - \\'error\\' is defined but never used. (no-unused-vars)\\n34:48 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n17:23 - \\'data\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/register.js should pass ESLint\\n\\n26:23 - \\'data\\' is defined but never used. (no-unused-vars)\\n30:24 - \\'error\\' is defined but never used. (no-unused-vars)\\n44:44 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/restaurant.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/restaurant.js should pass ESLint\\n\\n61:23 - \\'data\\' is defined but never used. (no-unused-vars)\\n64:24 - \\'error\\' is defined but never used. (no-unused-vars)\\n82:24 - \\'error\\' is defined but never used. (no-unused-vars)\\n107:40 - \\'error\\' is defined but never used. (no-unused-vars)\\n114:44 - \\'error\\' is defined but never used. (no-unused-vars)\\n122:44 - \\'error\\' is defined but never used. (no-unused-vars)\\n129:44 - \\'error\\' is defined but never used. (no-unused-vars)\\n136:40 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/restaurants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/restaurants.js should pass ESLint\\n\\n48:20 - \\'error\\' is defined but never used. (no-unused-vars)\\n59:40 - \\'error\\' is defined but never used. (no-unused-vars)\\n67:44 - \\'error\\' is defined but never used. (no-unused-vars)\\n77:44 - \\'error\\' is defined but never used. (no-unused-vars)\\n85:44 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('services/ajax.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/reservation-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/reservation-service.js should pass ESLint\\n\\n7:20 - \\'Promise\\' is not defined. (no-undef)\\n29:20 - \\'Promise\\' is not defined. (no-undef)\\n51:20 - \\'Promise\\' is not defined. (no-undef)\\n64:20 - \\'Promise\\' is not defined. (no-undef)\\n82:20 - \\'Promise\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('services/restaurant-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/restaurant-service.js should pass ESLint\\n\\n7:20 - \\'Promise\\' is not defined. (no-undef)\\n29:20 - \\'Promise\\' is not defined. (no-undef)\\n42:20 - \\'Promise\\' is not defined. (no-undef)\\n55:20 - \\'Promise\\' is not defined. (no-undef)\\n74:20 - \\'Promise\\' is not defined. (no-undef)\\n86:20 - \\'Promise\\' is not defined. (no-undef)\\n106:20 - \\'Promise\\' is not defined. (no-undef)\\n131:20 - \\'Promise\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('services/user-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/user-service.js should pass ESLint\\n\\n12:20 - \\'Promise\\' is not defined. (no-undef)\\n27:20 - \\'Promise\\' is not defined. (no-undef)\\n50:20 - \\'Promise\\' is not defined. (no-undef)\\n78:20 - \\'Promise\\' is not defined. (no-undef)');\n  });\n});","define('restaurants/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('restaurants/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'restaurants/tests/helpers/start-app', 'restaurants/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('restaurants/tests/helpers/resolver', ['exports', 'restaurants/resolver', 'restaurants/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('restaurants/tests/helpers/start-app', ['exports', 'restaurants/app', 'restaurants/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('restaurants/tests/integration/components/dollar-rating-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('dollar-rating', 'Integration | Component | dollar rating', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+9xdseja\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"dollar-rating\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"7xlQGgWh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dollar-rating\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/footer-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('footer-component', 'Integration | Component | footer component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w/Y6Wwu7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"footer-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XCyOfH/2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"footer-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/header-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('header-component', 'Integration | Component | header component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PmCEARoP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"header-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ue2qwXxb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"header-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/rate-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rate-component', 'Integration | Component | rate component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hUPuf59W\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"rate-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"htG9kJbo\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rate-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/restaurant-tile-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('restaurant-tile', 'Integration | Component | restaurant tile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"D3E9pMmK\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"restaurant-tile\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ViQvWpKc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"restaurant-tile\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/search-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('search-bar', 'Integration | Component | search bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tlJ6Y+u+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"search-bar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tWxfyg0C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"search-bar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/components/star-rating-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('star-rating', 'Integration | Component | star rating', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IROCw1eJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"star-rating\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w9hziEKp\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"star-rating\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('restaurants/tests/integration/helpers/adition-helper-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('adition-helper', 'helper:adition-helper', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"d1uS5FSX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"adition-helper\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('restaurants/tests/integration/helpers/current-date-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('current-date', 'helper:current-date', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QF8Ce9M8\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"current-date\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('restaurants/tests/integration/helpers/equals-helper-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('equals-helper', 'helper:equals-helper', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hWOoRlvG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"equals-helper\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('restaurants/tests/integration/helpers/format-date-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('format-date', 'helper:format-date', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wB2ngGss\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"format-date\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('restaurants/tests/integration/helpers/format-time-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('format-time', 'helper:format-time', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xtSsa97L\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"format-time\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('restaurants/tests/test-helper', ['restaurants/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('restaurants/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/dollar-rating-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dollar-rating-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/footer-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/footer-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/header-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/header-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rate-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rate-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/restaurant-tile-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/restaurant-tile-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/search-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/star-rating-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/star-rating-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/adition-helper-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/adition-helper-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/current-date-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/current-date-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/equals-helper-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/equals-helper-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/format-date-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/format-date-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/format-time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/format-time-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/complete-reservation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/complete-reservation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/restaurant-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/restaurant-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/restaurants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/restaurants-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/complete-reservation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/complete-reservation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/restaurant-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/restaurant-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/restaurants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/restaurants-test.js should pass ESLint\\n\\n');\n  });\n});","define('restaurants/tests/unit/adapters/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('restaurants/tests/unit/controllers/complete-reservation-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:complete-reservation', 'Unit | Controller | complete reservation', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('restaurants/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('restaurants/tests/unit/controllers/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('restaurants/tests/unit/controllers/restaurant-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:restaurant', 'Unit | Controller | restaurant', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('restaurants/tests/unit/controllers/restaurants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:restaurants', 'Unit | Controller | restaurants', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('restaurants/tests/unit/models/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('restaurants/tests/unit/routes/complete-reservation-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:complete-reservation', 'Unit | Route | complete reservation', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('restaurants/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('restaurants/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('restaurants/tests/unit/routes/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('restaurants/tests/unit/routes/restaurant-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:restaurant', 'Unit | Route | restaurant', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('restaurants/tests/unit/routes/restaurants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:restaurants', 'Unit | Route | restaurants', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('restaurants/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingszJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzfile":"tests.js"}